{
  "switch for styled": {
    "prefix": "switchd",
    "body": [
      "    switch (${1:i}++) {",
      "      case 0:",
      "      case 1:",
      "      case 2:",
      "      case 3:",
      "      case 4:",
      "    }$0"
    ],
    "description": "switch for styled"
  },

  "def.dart function template": {
    "prefix": "vartemplate",
    "body": [
      "/// Returns a `${1:Widget}`.",
      "///",
      "/// **`supported positional arguments:`**",
      "/// ```",
      "/// int: 0:fontSize, 1:letterSpacing, 2:wordSpacing",
      "///",
      "/// Widget: will be added into children:List<Widget>",
      "///",
      "/// ```",
      // "///",
      // "/// ***`not supported:`***,
      // "/// ```,
      // "/// ```
      "const ${1:Widget}d = Variadic($0${1:Widget}d) as dynamic;"
    ],
    "description": "def.dart function template"
  },

  "d function template": {
    "prefix": "dtemplate",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "$0${1:Widget}d(List argsList, Map<Symbol, dynamic> origArgsMap) {",
      "  final argsMap = <Symbol, dynamic>{};",
      "  int colori = 0;",
      "  int doublei = 0;",
      "",
      "  for (final arg in argsList) {",
      "    switch (arg) {",
      "      case Key arg:",
      "        argsMap[#key] = arg;",
      "        ",
      "    }",
      "  }",
      "",
      "  // named args(origArgsMap) precedes positional ones",
      "  if (origArgsMap.isNotEmpty) {",
      "    argsMap.addAll(origArgsMap);",
      "  }",
      "",
      "  return Function.apply(${1:Widget}.new, [], argsMap);",
      "}",
      ""
    ],
    "description": "d function template"
  },
  "assert for d-widget": {
    "prefix": "assertd",
    "body": [
      "\/\/* required:", 
      "assert(() {",
      "  if (argsMap[#${1:Symbol}] == null) {",
      "    throw FlutterError(\"${2:Widget}d requires `${1:Symbol}:${3:Type}`\");",
      "  }",
      "  return true;",
      "}());"
    ],
    "description": "assert for d-widget"
  },
  "require syntax for def.dart": {
    "prefix": "required",
    "body": [
      "\/\/\/ ***required***: `child:Widget, tag:Object`"
    ],
    "description": "require syntax for def.dart"
  },
  "argsMap prefix": {
    "prefix": "argsMap",
    "body": [
      "argsMap[#"
    ],
    "description": "argsMap prefix"
  },
  "argsMap if null": {
    "prefix": "arnull",
    "body": [
      " || argsMap[#${1:label}] == null"
    ],
    "description": "argsMap if null"
  }
}